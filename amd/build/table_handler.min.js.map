{"version":3,"file":"table_handler.min.js","sources":["../src/table_handler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Table handler JS module.\n *\n * @module     local_assessfreq/table_handler\n * @package\n * @copyright  2020 Guillermo Gomez <guillermogomez@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport * as Debouncer from 'local_assessfreq/debouncer';\nimport OverrideModal from 'local_assessfreq/override_modal';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\n\nexport default class TableHandler {\n\n    constructor(activity,\n                context,\n                tableElementId,\n                tableFragmentComponent,\n                tableFragmentValue,\n                tableRowPreference,\n                tableSortPreference,\n                tableSearchElement,\n                tableId = null,\n                tableMethodName = null) {\n        this.activityId = activity;\n        this.contextId = context;\n        this.elementId = tableElementId;\n        this.fragmentComponent = tableFragmentComponent;\n        this.fragmentValue = tableFragmentValue;\n        this.rowPreference = tableRowPreference;\n        this.sortPreference = tableSortPreference;\n        this.searchElement = tableSearchElement;\n        this.id = tableId;\n        this.methodName = tableMethodName;\n        this.overridden = false;\n    }\n\n    /**\n     * Display the table that contains all the students in the exam as well as their attempts.\n     *\n     * @param {int|string|null} page Page number.\n     */\n    getTable = (page = 0) => {\n        this.overridden = false;\n\n        let search = document.getElementById(this.searchElement).value.trim();\n        let tableElement = document.getElementById(this.elementId);\n        let spinner = tableElement.getElementsByClassName('overlay-icon-container')[0];\n        let tableBody = tableElement.getElementsByClassName('table-body')[0];\n        let values = {'search': search, 'page': page};\n\n        // Add values to Object depending on dashboard type.\n        if (this.activityId > 0) {\n            values.activityid = this.activityId;\n        }\n\n        let params = {'data': JSON.stringify(values)};\n\n        spinner.classList.remove('hide'); // Show spinner if not already shown.\n        Fragment.loadFragment(this.fragmentComponent, this.fragmentValue, this.contextId, params)\n            .done((response, js) => {\n                tableBody.innerHTML = response;\n                if (js) {\n                    Templates.runTemplateJS(js); // Magic call the initialises JS from template included in response template HTML.\n                }\n                spinner.classList.add('hide');\n                this.tableEventListeners(); // Re-add table event listeners.\n\n            }).fail(() => {\n                Notification.exception(new Error('Failed to update table.'))\n        });\n    };\n\n    /**\n     * This stops the ajax method that updates the table from being updated\n     * while the user is still checking options.\n     *\n     */\n    debounceTable = Debouncer.debouncer(() => {\n        this.getTable();\n    }, 750);\n\n    /**\n     * Process the sort click events from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableSort = (event) => {\n        event.preventDefault();\n\n        let sortArray = {};\n        const linkUrl = new URL(event.target.closest('a').href);\n        const targetSortBy = linkUrl.searchParams.get('tsort');\n        let targetSortOrder = linkUrl.searchParams.get('tdir');\n\n        // We want to flip the clicked column.\n        if (targetSortOrder === '') {\n            targetSortOrder = \"4\";\n        }\n\n        sortArray[targetSortBy] = targetSortOrder;\n\n        // Set option via ajax.\n        // eslint-disable-next-line promise/catch-or-return\n        Ajax.call([{\n            methodname: this.methodName,\n            args: {\n                tableid: this.id,\n                preference: 'sortby',\n                values: JSON.stringify(sortArray)\n            },\n            // eslint-disable-next-line promise/always-return\n        }])[0].then(() => {\n            this.getTable(); // Reload the table.\n        });\n\n    };\n\n    /**\n     * Process the sort click events from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableHide = (event) => {\n        event.preventDefault();\n\n        let hideArray = {};\n        const linkUrl = new URL(event.target.closest('a').href);\n        const tableElement = document.getElementById(this.elementId);\n        const links = tableElement.querySelectorAll('a');\n        let targetAction;\n        let targetColumn;\n        let action;\n        let column;\n\n        if (linkUrl.search.indexOf('thide') !== -1) {\n            targetAction = 'hide';\n            targetColumn = linkUrl.searchParams.get('thide');\n        } else {\n            targetAction = 'show';\n            targetColumn = linkUrl.searchParams.get('tshow');\n        }\n\n        for (let i = 0; i < links.length; i++) {\n            let hideLinkUrl = new URL(links[i].href);\n            if (hideLinkUrl.search.indexOf('thide') !== -1) {\n                action = 'hide';\n                column = hideLinkUrl.searchParams.get('thide');\n            } else {\n                action = 'show';\n                column = hideLinkUrl.searchParams.get('tshow');\n            }\n\n            if (action === 'show') {\n                hideArray[column] = 1;\n            }\n        }\n\n        hideArray[targetColumn] = (targetAction === 'hide') ? 1 : 0; // We want to flip the clicked column.\n\n        // Set option via ajax.\n        // eslint-disable-next-line promise/catch-or-return\n        Ajax.call([{\n            methodname: this.methodName,\n            args: {\n                tableid: this.id,\n                preference: 'collapse',\n                values: JSON.stringify(hideArray)\n            },\n            // eslint-disable-next-line promise/always-return\n        }])[0].then(() => {\n            this.getTable(); // Reload the table.\n        });\n\n    };\n\n    /**\n     * Process the reset click event from the table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableReset = (event) => {\n        event.preventDefault();\n\n        // Set option via ajax.\n        // eslint-disable-next-line promise/catch-or-return\n        Ajax.call([{\n            methodname: this.methodName,\n            args: {\n                tableid: this.id,\n                preference: 'reset',\n                values: JSON.stringify({})\n            },\n            // eslint-disable-next-line promise/always-return\n        }])[0].then(() => {\n            this.getTable(); // Reload the table.\n        });\n\n    };\n\n    /**\n     * Process the search events from the student table.\n     *\n     * @param {Event} event\n     * @return {Boolean}\n     */\n    tableSearch = (event) => {\n        if (event.key === 'Meta' || event.ctrlKey) {\n            return false;\n        }\n\n        if (event.target.value.length === 0 || event.target.value.length > 2) {\n            this.debounceTable();\n        }\n        return true;\n    };\n\n    /**\n     * Process the search reset click event from the student table.\n     *\n     */\n    tableSearchReset = () => {\n        let tableSearchInputElement = document.getElementById(this.searchElement);\n        tableSearchInputElement.value = '';\n        tableSearchInputElement.focus();\n        this.getTable();\n    };\n\n    /**\n     * Process the row set event from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableSearchRowSet = (event) => {\n        event.preventDefault();\n        if (event.target.tagName.toLowerCase() === 'a') {\n            let rows = event.target.dataset.metric;\n            UserPreference.setUserPreference(this.rowPreference, rows)\n                // eslint-disable-next-line promise/always-return\n                .then(() => {\n                    this.getTable(); // Reload the table.\n                })\n                .fail(() => {\n                    Notification.exception(new Error('Failed to update user preference: rows'));\n                });\n        }\n    };\n\n    /**\n     * Process the nav event from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableNav = (event) => {\n        event.preventDefault();\n\n        const linkUrl = new URL(event.target.closest('a').href);\n        const page = linkUrl.searchParams.get('page');\n\n        if (page) {\n            this.getTable(page);\n        }\n    };\n\n    /**\n     * Get and process the selected assessment metric from the dropdown for the heatmap display,\n     * and update the corresponding user preference.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableSortButtonAction = (event) => {\n        event.preventDefault();\n        var element = event.target;\n\n        if (element.tagName.toLowerCase() === 'a' && element.dataset.sort !== this.sortValue) {\n            this.sortValue = element.dataset.sort;\n\n            let links = element.parentNode.getElementsByTagName('a');\n            for (let i = 0; i < links.length; i++) {\n                links[i].classList.remove('active');\n            }\n\n            element.classList.add('active');\n\n            // Save selection as a user preference.\n            UserPreference.setUserPreference(this.sortPreference, this.sortValue);\n\n            this.debounceTable(); // Call function to update table.\n        }\n    };\n\n    /**\n     * Re-add event listeners when the student table is updated.\n     */\n    tableEventListeners = () => {\n        const tableElement = document.getElementById(this.elementId);\n        const links = tableElement.querySelectorAll('a');\n        const resetLink = tableElement.getElementsByClassName('resettable');\n        const overrideLinks = tableElement.getElementsByClassName('action-icon override');\n        const disabledLinks = tableElement.getElementsByClassName('action-icon disabled');\n        const tableNavElement = tableElement.querySelectorAll('nav'); // There are two nav paging elements per table.\n\n        for (let i = 0; i < links.length; i++) {\n            let linkUrl = new URL(links[i].href);\n            if (linkUrl.search.indexOf('thide') !== -1 || linkUrl.search.indexOf('tshow') !== -1) {\n                links[i].addEventListener('click', this.tableHide);\n            } else if (linkUrl.search.indexOf('tsort') !== -1) {\n                links[i].addEventListener('click', this.tableSort);\n            }\n        }\n\n        if (resetLink.length > 0) {\n            resetLink[0].addEventListener('click', this.tableReset);\n        }\n\n        for (let i = 0; i < overrideLinks.length; i++) {\n            overrideLinks[i].addEventListener('click', this.triggerOverrideModal);\n        }\n\n        for (let i = 0; i < disabledLinks.length; i++) {\n            disabledLinks[i].addEventListener('click', (event) => {\n                event.preventDefault();\n            });\n        }\n\n        tableNavElement.forEach((navElement) => {\n            navElement.addEventListener('click', this.tableNav);\n        });\n    };\n\n    /**\n     * Trigger the override modal form. Thin wrapper to add extra data to click event.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    triggerOverrideModal = (event) => {\n        event.preventDefault();\n        let userid = event.target.closest('a').id.substring(25);\n        if (userid.includes('-')) {\n            let elements = userid.split('-');\n            this.activityId = elements.pop();\n            userid = elements.pop();\n        }\n\n        OverrideModal.displayModalForm(this.activityId, userid, this.hoursFilter);\n    };\n}\n"],"names":["constructor","activity","context","tableElementId","tableFragmentComponent","tableFragmentValue","tableRowPreference","tableSortPreference","tableSearchElement","tableId","tableMethodName","activityId","contextId","elementId","fragmentComponent","fragmentValue","rowPreference","sortPreference","searchElement","id","methodName","overridden","getTable","page","_this","search","document","getElementById","value","trim","tableElement","spinner","getElementsByClassName","tableBody","values","activityid","params","JSON","stringify","classList","remove","loadFragment","done","response","js","innerHTML","runTemplateJS","add","tableEventListeners","fail","exception","Error","debounceTable","Debouncer","debouncer","tableSort","event","preventDefault","sortArray","linkUrl","URL","target","closest","href","targetSortBy","searchParams","get","targetSortOrder","call","methodname","this","args","tableid","preference","then","tableHide","hideArray","links","querySelectorAll","targetAction","targetColumn","action","column","indexOf","i","length","hideLinkUrl","tableReset","tableSearch","key","ctrlKey","tableSearchReset","tableSearchInputElement","focus","tableSearchRowSet","tagName","toLowerCase","rows","dataset","metric","UserPreference","setUserPreference","tableNav","tableSortButtonAction","element","sort","sortValue","parentNode","getElementsByTagName","resetLink","overrideLinks","disabledLinks","tableNavElement","addEventListener","triggerOverrideModal","forEach","navElement","userid","substring","includes","elements","split","pop","displayModalForm","hoursFilter"],"mappings":"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"}