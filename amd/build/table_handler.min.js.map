{"version":3,"file":"table_handler.min.js","sources":["../src/table_handler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Table handler JS module.\n *\n * @module     local_assessfreq/table_handler\n * @package\n * @copyright  2020 Guillermo Gomez <guillermogomez@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport * as Debouncer from 'local_assessfreq/debouncer';\nimport OverrideModal from 'local_assessfreq/override_modal';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\n\nexport default class TableHandler {\n\n    constructor(activity,\n                context,\n                tableElementId,\n                tableFragmentComponent,\n                tableFragmentValue,\n                tableRowPreference,\n                tableSortPreference,\n                tableSearchElement,\n                tableId = null,\n                tableMethodName = null) {\n        this.activityId = activity;\n        this.contextId = context;\n        this.elementId = tableElementId;\n        this.fragmentComponent = tableFragmentComponent;\n        this.fragmentValue = tableFragmentValue;\n        this.rowPreference = tableRowPreference;\n        this.sortPreference = tableSortPreference;\n        this.searchElement = tableSearchElement;\n        this.id = tableId;\n        this.methodName = tableMethodName;\n        this.overridden = false;\n    }\n\n    /**\n     * Display the table that contains all the students in the exam as well as their attempts.\n     *\n     * @param {int|string|null} page Page number.\n     */\n    getTable = (page = 0) => {\n        this.overridden = false;\n\n        let search = document.getElementById(this.searchElement).value.trim();\n        let tableElement = document.getElementById(this.elementId);\n        let spinner = tableElement.getElementsByClassName('overlay-icon-container')[0];\n        let tableBody = tableElement.getElementsByClassName('table-body')[0];\n        let values = {'search': search, 'page': page};\n\n        // Add values to Object depending on dashboard type.\n        if (this.activityId > 0) {\n            values.activityid = this.activityId;\n        }\n\n        let params = {'data': JSON.stringify(values)};\n\n        spinner.classList.remove('hide'); // Show spinner if not already shown.\n        Fragment.loadFragment(this.fragmentComponent, this.fragmentValue, this.contextId, params)\n            .done((response, js) => {\n                tableBody.innerHTML = response;\n                if (js) {\n                    Templates.runTemplateJS(js); // Magic call the initialises JS from template included in response template HTML.\n                }\n                spinner.classList.add('hide');\n                this.tableEventListeners(); // Re-add table event listeners.\n\n            }).fail(() => {\n                Notification.exception(new Error('Failed to update table.'))\n        });\n    };\n\n    /**\n     * This stops the ajax method that updates the table from being updated\n     * while the user is still checking options.\n     *\n     */\n    debounceTable = Debouncer.debouncer(() => {\n        this.getTable();\n    }, 750);\n\n    /**\n     * Process the sort click events from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableSort = (event) => {\n        event.preventDefault();\n\n        let sortArray = {};\n        const linkUrl = new URL(event.target.closest('a').href);\n        const targetSortBy = linkUrl.searchParams.get('tsort');\n        let targetSortOrder = linkUrl.searchParams.get('tdir');\n\n        // We want to flip the clicked column.\n        if (targetSortOrder === '') {\n            targetSortOrder = \"4\";\n        }\n\n        sortArray[targetSortBy] = targetSortOrder;\n\n        // Set option via ajax.\n        // eslint-disable-next-line promise/catch-or-return\n        Ajax.call([{\n            methodname: this.methodName,\n            args: {\n                tableid: this.id,\n                preference: 'sortby',\n                values: JSON.stringify(sortArray)\n            },\n            // eslint-disable-next-line promise/always-return\n        }])[0].then(() => {\n            this.getTable(); // Reload the table.\n        });\n\n    };\n\n    /**\n     * Process the sort click events from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableHide = (event) => {\n        event.preventDefault();\n\n        let hideArray = {};\n        const linkUrl = new URL(event.target.closest('a').href);\n        const tableElement = document.getElementById(this.elementId);\n        const links = tableElement.querySelectorAll('a');\n        let targetAction;\n        let targetColumn;\n        let action;\n        let column;\n\n        if (linkUrl.search.indexOf('thide') !== -1) {\n            targetAction = 'hide';\n            targetColumn = linkUrl.searchParams.get('thide');\n        } else {\n            targetAction = 'show';\n            targetColumn = linkUrl.searchParams.get('tshow');\n        }\n\n        for (let i = 0; i < links.length; i++) {\n            let hideLinkUrl = new URL(links[i].href);\n            if (hideLinkUrl.search.indexOf('thide') !== -1) {\n                action = 'hide';\n                column = hideLinkUrl.searchParams.get('thide');\n            } else {\n                action = 'show';\n                column = hideLinkUrl.searchParams.get('tshow');\n            }\n\n            if (action === 'show') {\n                hideArray[column] = 1;\n            }\n        }\n\n        hideArray[targetColumn] = (targetAction === 'hide') ? 1 : 0; // We want to flip the clicked column.\n\n        // Set option via ajax.\n        // eslint-disable-next-line promise/catch-or-return\n        Ajax.call([{\n            methodname: this.methodName,\n            args: {\n                tableid: this.id,\n                preference: 'collapse',\n                values: JSON.stringify(hideArray)\n            },\n            // eslint-disable-next-line promise/always-return\n        }])[0].then(() => {\n            this.getTable(); // Reload the table.\n        });\n\n    };\n\n    /**\n     * Process the reset click event from the table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableReset = (event) => {\n        event.preventDefault();\n\n        // Set option via ajax.\n        // eslint-disable-next-line promise/catch-or-return\n        Ajax.call([{\n            methodname: this.methodName,\n            args: {\n                tableid: this.id,\n                preference: 'reset',\n                values: JSON.stringify({})\n            },\n            // eslint-disable-next-line promise/always-return\n        }])[0].then(() => {\n            this.getTable(); // Reload the table.\n        });\n\n    };\n\n    /**\n     * Process the search events from the student table.\n     *\n     * @param {Event} event\n     * @return {Boolean}\n     */\n    tableSearch = (event) => {\n        if (event.key === 'Meta' || event.ctrlKey) {\n            return false;\n        }\n\n        if (event.target.value.length === 0 || event.target.value.length > 2) {\n            this.debounceTable();\n        }\n        return true;\n    };\n\n    /**\n     * Process the search reset click event from the student table.\n     *\n     */\n    tableSearchReset = () => {\n        let tableSearchInputElement = document.getElementById(this.searchElement);\n        tableSearchInputElement.value = '';\n        tableSearchInputElement.focus();\n        this.getTable();\n    };\n\n    /**\n     * Process the row set event from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableSearchRowSet = (event) => {\n        event.preventDefault();\n        if (event.target.tagName.toLowerCase() === 'a') {\n            let rows = event.target.dataset.metric;\n            UserPreference.setUserPreference(this.rowPreference, rows)\n                // eslint-disable-next-line promise/always-return\n                .then(() => {\n                    this.getTable(); // Reload the table.\n                })\n                .fail(() => {\n                    Notification.exception(new Error('Failed to update user preference: rows'));\n                });\n        }\n    };\n\n    /**\n     * Process the nav event from the student table.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableNav = (event) => {\n        event.preventDefault();\n\n        const linkUrl = new URL(event.target.closest('a').href);\n        const page = linkUrl.searchParams.get('page');\n\n        if (page) {\n            this.getTable(page);\n        }\n    };\n\n    /**\n     * Get and process the selected assessment metric from the dropdown for the heatmap display,\n     * and update the corresponding user preference.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    tableSortButtonAction = (event) => {\n        event.preventDefault();\n        var element = event.target;\n\n        if (element.tagName.toLowerCase() === 'a' && element.dataset.sort !== this.sortValue) {\n            this.sortValue = element.dataset.sort;\n\n            let links = element.parentNode.getElementsByTagName('a');\n            for (let i = 0; i < links.length; i++) {\n                links[i].classList.remove('active');\n            }\n\n            element.classList.add('active');\n\n            // Save selection as a user preference.\n            UserPreference.setUserPreference(this.sortPreference, this.sortValue);\n\n            this.debounceTable(); // Call function to update table.\n        }\n    };\n\n    /**\n     * Re-add event listeners when the student table is updated.\n     */\n    tableEventListeners = () => {\n        const tableElement = document.getElementById(this.elementId);\n        const links = tableElement.querySelectorAll('a');\n        const resetLink = tableElement.getElementsByClassName('resettable');\n        const overrideLinks = tableElement.getElementsByClassName('action-icon override');\n        const disabledLinks = tableElement.getElementsByClassName('action-icon disabled');\n        const tableNavElement = tableElement.querySelectorAll('nav'); // There are two nav paging elements per table.\n\n        for (let i = 0; i < links.length; i++) {\n            let linkUrl = new URL(links[i].href);\n            if (linkUrl.search.indexOf('thide') !== -1 || linkUrl.search.indexOf('tshow') !== -1) {\n                links[i].addEventListener('click', this.tableHide);\n            } else if (linkUrl.search.indexOf('tsort') !== -1) {\n                links[i].addEventListener('click', this.tableSort);\n            }\n        }\n\n        if (resetLink.length > 0) {\n            resetLink[0].addEventListener('click', this.tableReset);\n        }\n\n        for (let i = 0; i < overrideLinks.length; i++) {\n            overrideLinks[i].addEventListener('click', this.triggerOverrideModal);\n        }\n\n        for (let i = 0; i < disabledLinks.length; i++) {\n            disabledLinks[i].addEventListener('click', (event) => {\n                event.preventDefault();\n            });\n        }\n\n        tableNavElement.forEach((navElement) => {\n            navElement.addEventListener('click', this.tableNav);\n        });\n    };\n\n    /**\n     * Trigger the override modal form. Thin wrapper to add extra data to click event.\n     *\n     * @param {Event} event The triggered event for the element.\n     */\n    triggerOverrideModal = (event) => {\n        event.preventDefault();\n        let userid = event.target.closest('a').id.substring(25);\n        if (userid.includes('-')) {\n            let elements = userid.split('-');\n            this.activityId = elements.pop();\n            userid = elements.pop();\n        }\n\n        OverrideModal.displayModalForm(this.activityId, userid, this.hoursFilter);\n    };\n}"],"names":["constructor","activity","context","tableElementId","tableFragmentComponent","tableFragmentValue","tableRowPreference","tableSortPreference","tableSearchElement","tableId","tableMethodName","page","_this","overridden","search","document","getElementById","searchElement","value","trim","tableElement","elementId","spinner","getElementsByClassName","tableBody","values","activityId","activityid","params","JSON","stringify","classList","remove","loadFragment","fragmentComponent","fragmentValue","contextId","done","response","js","innerHTML","runTemplateJS","add","tableEventListeners","fail","exception","Error","Debouncer","debouncer","getTable","event","preventDefault","sortArray","linkUrl","URL","target","closest","href","targetSortBy","searchParams","get","targetSortOrder","call","methodname","this","methodName","args","tableid","id","preference","then","hideArray","links","querySelectorAll","targetAction","targetColumn","action","column","indexOf","i","length","hideLinkUrl","key","ctrlKey","debounceTable","tableSearchInputElement","focus","tagName","toLowerCase","rows","dataset","metric","UserPreference","setUserPreference","rowPreference","element","sort","sortValue","parentNode","getElementsByTagName","sortPreference","resetLink","overrideLinks","disabledLinks","tableNavElement","addEventListener","tableHide","tableSort","tableReset","triggerOverrideModal","forEach","navElement","tableNav","userid","substring","includes","elements","split","pop","displayModalForm","hoursFilter"],"mappings":"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"}