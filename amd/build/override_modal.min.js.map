{"version":3,"file":"override_modal.min.js","sources":["../src/override_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for report card display and processing.\n *\n * @package\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    ['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax) {\n\n        /**\n         * Module level variables.\n         */\n        let OverrideModal = {};\n        let contextid;\n        let activitytype;\n        let modalObj;\n        let activityid;\n        let userid;\n        let tableHandler;\n\n        const spinner = '<p class=\"text-center\">'\n            + '<i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>'\n            + '</p>';\n\n        /**\n         * Create the modal window.\n         *\n         * @private\n         */\n        const createModal = function() {\n            Str.get_string('loading').then((title) => {\n                // Create the Modal.\n                ModalFactory.create({\n                    type: ModalFactory.types.DEFAULT,\n                    title: title,\n                    body: spinner,\n                    large: true\n                })\n                    .done((modal) => {\n                        modalObj = modal;\n                        // Explicitly handle form click events.\n                        modalObj.getRoot().on('click', '#id_submitbutton', processModalForm);\n                        modalObj.getRoot().on('click', '#id_cancel', function(e) {\n                            e.preventDefault();\n                            modalObj.setBody(spinner);\n                            modalObj.hide();\n                        });\n                    });\n            });\n        };\n\n        /**\n         * Updates the body of the modal window.\n         *\n         * @param {Integer} activity\n         * @param {Integer} user\n         * @param {Object} formdata\n         * @private\n         */\n        const updateModalBody = function(activity, user, formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            let params = {\n                'jsonformdata': JSON.stringify(formdata),\n                'activitytype': activitytype,\n                'activityid': activity,\n                'userid': user\n            };\n\n            modalObj.setBody(spinner);\n            Str.get_string('modal:useroverride', 'local_assessfreq').then((title) => {\n                modalObj.setTitle(title);\n                modalObj.setBody(Fragment.loadFragment('local_assessfreq', 'new_override_form', contextid, params));\n            });\n        };\n\n        /**\n         * Updates Moodle form with selected information.\n         *\n         * @param {Object} e\n         * @private\n         */\n        function processModalForm(e) {\n            e.preventDefault(); // Stop modal from closing.\n\n            // Form data.\n            let overrideform = modalObj.getRoot().find('form').serialize();\n            let formjson = JSON.stringify(overrideform);\n\n            // Handle invalid form fields for better UX.\n            // I hate that I had to use JQuery for this.\n            let invalid = $.merge(\n                modalObj.getRoot().find('[aria-invalid=\"true\"]'),\n                modalObj.getRoot().find('.error')\n            );\n\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Submit form via ajax.\n            Ajax.call([{\n                methodname: 'local_assessfreq_process_override_form',\n                args: {\n                    'jsonformdata': formjson,\n                    'activityid': activityid,\n                    'activitytype': activitytype,\n                },\n            }])[0].done(() => {\n                // For submission succeeded.\n                modalObj.setBody(spinner);\n                modalObj.hide();\n                if (tableHandler !== undefined) {\n                    tableHandler.getTable();\n                }\n            }).fail(() => {\n                // Form submission failed server side, redisplay with errors.\n                updateModalBody(activityid, userid, overrideform);\n            });\n        }\n\n        /**\n         * Display the Modal form.\n         * @param {Integer} activity\n         * @param {Integer} user\n         */\n        OverrideModal.displayModalForm = function(activity, user) {\n            activityid = activity;\n            userid = user;\n            updateModalBody(activityid, user);\n            modalObj.show();\n        };\n\n        /**\n         * Initialise method for dashboard rendering.\n         * @param {Integer} context\n         * @param {String} module\n         * @param {TableHandler} tablehandler If defined will trigger a table refresh on form save.\n         */\n        OverrideModal.init = function(context, module, tablehandler = undefined) {\n            activitytype = module;\n            contextid = context;\n            tableHandler = tablehandler;\n            createModal();\n        };\n\n        return OverrideModal;\n    }\n);\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","contextid","activitytype","modalObj","activityid","userid","tableHandler","OverrideModal","spinner","createModal","get_string","then","title","create","type","types","DEFAULT","body","large","done","modal","getRoot","on","processModalForm","e","preventDefault","setBody","hide","updateModalBody","activity","user","formdata","params","JSON","stringify","setTitle","loadFragment","overrideform","find","serialize","formjson","invalid","merge","length","first","focus","call","methodname","args","undefined","getTable","fail","displayModalForm","show","init","context","module","tablehandler"],"mappings":";;;;;;;AAuBAA,yCACI,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,cACnF,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,UAM9CC,UACAC,aACAC,SACAC,WACAC,OACAC,aANAC,cAAgB,SAQdC,QAAU,sFASVC,YAAc,WAChBb,IAAIc,WAAW,WAAWC,MAAMC,QAE5Bf,aAAagB,OAAO,CAChBC,KAAMjB,aAAakB,MAAMC,QACzBJ,MAAOA,MACPK,KAAMT,QACNU,OAAO,IAENC,MAAMC,QACHjB,SAAWiB,MAEXjB,SAASkB,UAAUC,GAAG,QAAS,mBAAoBC,kBACnDpB,SAASkB,UAAUC,GAAG,QAAS,cAAc,SAASE,GAClDA,EAAEC,iBACFtB,SAASuB,QAAQlB,SACjBL,SAASwB,iBAcvBC,gBAAkB,SAASC,SAAUC,KAAMC,eACrB,IAAbA,WACPA,SAAW,QAGXC,OAAS,cACOC,KAAKC,UAAUH,uBACf7B,wBACF2B,gBACJC,MAGd3B,SAASuB,QAAQlB,SACjBZ,IAAIc,WAAW,qBAAsB,oBAAoBC,MAAMC,QAC3DT,SAASgC,SAASvB,OAClBT,SAASuB,QAAQ3B,SAASqC,aAAa,mBAAoB,oBAAqBnC,UAAW+B,sBAU1FT,iBAAiBC,GACtBA,EAAEC,qBAGEY,aAAelC,SAASkB,UAAUiB,KAAK,QAAQC,YAC/CC,SAAWP,KAAKC,UAAUG,cAI1BI,QAAU9C,EAAE+C,MACZvC,SAASkB,UAAUiB,KAAK,yBACxBnC,SAASkB,UAAUiB,KAAK,WAGxBG,QAAQE,OACRF,QAAQG,QAAQC,QAKpB7C,KAAK8C,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,cACcR,oBACFpC,wBACEF,iBAEpB,GAAGiB,MAAK,KAERhB,SAASuB,QAAQlB,SACjBL,SAASwB,YACYsB,IAAjB3C,cACAA,aAAa4C,cAElBC,MAAK,KAEJvB,gBAAgBxB,WAAYC,OAAQgC,wBAS5C9B,cAAc6C,iBAAmB,SAASvB,SAAUC,MAChD1B,WAAayB,SACbxB,OAASyB,KACTF,gBAAgBxB,WAAY0B,MAC5B3B,SAASkD,QASb9C,cAAc+C,KAAO,SAASC,QAASC,YAAQC,yEAAeR,EAC1D/C,aAAesD,OACfvD,UAAYsD,QACZjD,aAAemD,aACfhD,eAGGF"}