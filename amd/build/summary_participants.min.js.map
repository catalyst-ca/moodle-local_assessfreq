{"version":3,"sources":["../src/summary_participants.js"],"names":["define","Fragment","Templates","Str","Notification","chart","assessids","contextid","forEach","assessid","chartElement","document","getElementById","params","JSON","stringify","loadFragment","done","response","resObj","parse","hasdata","context","position","render","html","js","replaceNodeContents","fail","exception","Error","get_string","then","str","noDatastr","createElement","innerHTML","outerHTML","catch"],"mappings":"AAuBAA,OAAM,yCAAC,CAAC,eAAD,CAAkB,gBAAlB,CAAoC,UAApC,CAAgD,mBAAhD,CAAD,CACN,SAASC,CAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAmCC,CAAnC,CAAiD,CAgD7C,MA3Cc,CAENC,KAFM,CAEE,SAASC,CAAT,CAAoBC,CAApB,CAA+B,CAC3CD,CAAS,CAACE,OAAV,CAAkB,SAACC,CAAD,CAAc,IACxBC,CAAAA,CAAY,CAAGC,QAAQ,CAACC,cAAT,CAAwBH,CAAQ,CAAG,gBAAnC,CADS,CAExBI,CAAM,CAAG,CAAC,KAAQC,IAAI,CAACC,SAAL,CAAe,CAAC,KAASN,CAAV,CAAoB,KAAQ,qBAA5B,CAAf,CAAT,CAFe,CAI5BR,CAAQ,CAACe,YAAT,CAAsB,kBAAtB,CAA0C,gBAA1C,CAA4DT,CAA5D,CAAuEM,CAAvE,EACCI,IADD,CACM,SAACC,CAAD,CAAc,CAChB,GAAIC,CAAAA,CAAM,CAAGL,IAAI,CAACM,KAAL,CAAWF,CAAX,CAAb,CACA,GAAI,IAAAC,CAAM,CAACE,OAAX,CAA4B,IAEpBC,CAAAA,CAAO,CAAG,CACV,YADU,CAEV,UAAcR,IAAI,CAACC,SAAL,CAAeI,CAAM,CAACd,KAAtB,CAFJ,CAGV,SAHU,CAIV,OAAWS,IAAI,CAACC,SAAL,CALF,CAACQ,QAAQ,CAAE,MAAX,CAKE,CAJD,CAFU,CAQxBrB,CAAS,CAACsB,MAAV,CAAiB,wBAAjB,CAA2CF,CAA3C,EAAoDL,IAApD,CAAyD,SAACQ,CAAD,CAAOC,CAAP,CAAc,CAEnExB,CAAS,CAACyB,mBAAV,CAA8BjB,CAA9B,CAA4Ce,CAA5C,CAAkDC,CAAlD,CACH,CAHD,EAGGE,IAHH,CAGQ,UAAM,CACVxB,CAAY,CAACyB,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,gCAAV,CAAvB,CAEH,CAND,CAQH,CAhBD,IAgBO,CACH3B,CAAG,CAAC4B,UAAJ,CAAe,QAAf,CAAyB,kBAAzB,EAA6CC,IAA7C,CAAkD,SAACC,CAAD,CAAS,CACvD,GAAMC,CAAAA,CAAS,CAAGvB,QAAQ,CAACwB,aAAT,CAAuB,IAAvB,CAAlB,CACAD,CAAS,CAACE,SAAV,CAAsBH,CAAtB,CACAvB,CAAY,CAAC0B,SAAb,CAAyBF,CAAS,CAACG,SAEtC,CALD,EAKGC,KALH,CAKS,UAAM,CACXlC,CAAY,CAACyB,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,+BAAV,CAAvB,CACH,CAPD,CAQH,CACJ,CA7BD,EA6BGF,IA7BH,CA6BQ,UAAM,CACVxB,CAAY,CAACyB,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,sBAAV,CAAvB,CAEH,CAhCD,CAiCH,CArCD,CAsCH,CAzCa,CA4CjB,CAlDK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for summary participants graph.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/fragment', 'core/templates', 'core/str', 'core/notification'],\nfunction(Fragment, Templates, Str, Notification) {\n\n    /**\n     * Module level variables.\n     */\n    var Summary = {};\n\n    Summary.chart = function(assessids, contextid) {\n        assessids.forEach((assessid) => {\n            let chartElement = document.getElementById(assessid + '-summary-graph');\n            let params = {'data': JSON.stringify({'quiz' : assessid, 'call': 'participant_summary'})};\n\n            Fragment.loadFragment('local_assessfreq', 'get_quiz_chart', contextid, params)\n            .done((response) => {\n                let resObj = JSON.parse(response);\n                if (resObj.hasdata == true) {\n                    let legend = {position: 'left'};\n                    let context = {\n                        'withtable' : false,\n                        'chartdata' : JSON.stringify(resObj.chart),\n                        'aspect' : false,\n                        'legend' : JSON.stringify(legend)\n                    };\n                    Templates.render('local_assessfreq/chart', context).done((html, js) => {\n                        // Load card body.\n                        Templates.replaceNodeContents(chartElement, html, js);\n                    }).fail(() => {\n                        Notification.exception(new Error('Failed to load chart template.'));\n                        return;\n                    });\n                    return;\n                } else {\n                    Str.get_string('nodata', 'local_assessfreq').then((str) => {\n                        const noDatastr = document.createElement('h3');\n                        noDatastr.innerHTML = str;\n                        chartElement.innerHTML = noDatastr.outerHTML;\n                        return;\n                    }).catch(() => {\n                        Notification.exception(new Error('Failed to load string: nodata'));\n                    });\n                }\n            }).fail(() => {\n                Notification.exception(new Error('Failed to load card.'));\n                return;\n            });\n        });\n    };\n\n    return Summary;\n});"],"file":"summary_participants.min.js"}