{"version":3,"sources":["../src/dayview.js"],"names":["define","Str","Notification","ModalFactory","ModalLarge","Templates","Ajax","Dayview","modalObj","spinner","stringArr","key","component","stringResult","systemTimezone","dayViewTitle","getUserDate","timestamp","format","Promise","resolve","systemTimezoneTime","Date","toLocaleString","timeZone","date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","strftimetime","substr","formatData","response","responseArr","JSON","parse","scaler","i","length","endyear","endmonth","endday","dayStart","getTime","timeStart","timestart","timeStartTimestamp","timeEnd","timeend","timeEndTimestamp","secondsSinceDayStart","leftMargin","width","start","leftmargin","end","display","setBody","show","jsonArgs","stringify","modules","call","methodname","args","jsondata","then","parseInt","setTitle","render","rows","fail","exception","Error","init","get_strings","catch","stringReturn","get_string","title","create","type","TYPE","body","done","modal"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for heatmap calendar generation and display.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/str', 'core/notification', 'core/modal_factory', 'local_assessfreq/modal_large', 'core/templates', 'core/ajax'],\nfunction(Str, Notification, ModalFactory, ModalLarge, Templates, Ajax) {\n\n    /**\n     * Module level variables.\n     */\n    var Dayview = {};\n    var modalObj;\n    const spinner = '<p class=\"text-center\">'\n        + '<i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>'\n        + '</p>';\n\n    const stringArr = [\n        {key: 'sun', component: 'calendar'},\n        {key: 'mon', component: 'calendar'},\n        {key: 'tue', component: 'calendar'},\n        {key: 'wed', component: 'calendar'},\n        {key: 'thu', component: 'calendar'},\n        {key: 'fri', component: 'calendar'},\n        {key: 'sat', component: 'calendar'},\n        {key: 'jan', component: 'local_assessfreq'},\n        {key: 'feb', component: 'local_assessfreq'},\n        {key: 'mar', component: 'local_assessfreq'},\n        {key: 'apr', component: 'local_assessfreq'},\n        {key: 'may', component: 'local_assessfreq'},\n        {key: 'jun', component: 'local_assessfreq'},\n        {key: 'jul', component: 'local_assessfreq'},\n        {key: 'aug', component: 'local_assessfreq'},\n        {key: 'sep', component: 'local_assessfreq'},\n        {key: 'oct', component: 'local_assessfreq'},\n        {key: 'nov', component: 'local_assessfreq'},\n        {key: 'dec', component: 'local_assessfreq'},\n    ];\n    var stringResult;\n    var systemTimezone = 'Australia/Melbourne';\n    var dayViewTitle = '';\n\n    const getUserDate = function (timestamp, format) {\n        return new Promise((resolve) => {\n            const systemTimezoneTime = new Date(timestamp * 1000).toLocaleString('en-US', {timeZone: systemTimezone});\n            let date = new Date(systemTimezoneTime);\n            const year = date.getFullYear();\n            const month = stringResult[(7 + date.getMonth())];\n            const day = date.getDate();\n            const hours = date.getHours();\n            const minutes = '0' + date.getMinutes();\n\n            const strftimetime = hours + ':' + minutes.substr(-2); // Will display time in 10:30 format.\n            const strftimedatetime = day + ' ' + month + ' ' + year + ', ' + strftimetime;\n\n            if (format === 'strftimetime') {\n                resolve(strftimetime);\n            } else {\n                resolve(strftimedatetime);\n            }\n\n        });\n    };\n\n    const formatData = async function(response) {\n        let responseArr = JSON.parse(response);\n\n        // We are displaying the event as a bar whose width represents the start and end time of the event.\n        // We need to scale the width of the bar to match the width of the container. Therefore 100% width of the container\n        // equals 24 hours (one day).\n        // There are 1440 mins per day. 1440 mins equals 100%, therefore 1 min = (100/1440)%. 5/72 == 100/1440.\n        let scaler = 5 / 72;\n\n        for (let i = 0; i < responseArr.length; i++) {\n            const year = responseArr[i].endyear;\n            const month = (responseArr[i].endmonth) - 1; // Minus 1 for difference between months in PHP and JS.\n            const day = responseArr[i].endday;\n            const dayStart = (new Date(year, month, day).getTime()) / 1000;\n            const timeStart = new Date(responseArr[i].timestart * 1000).toLocaleString('en-US', {timeZone: systemTimezone});\n            const timeStartTimestamp = (new Date(timeStart).getTime()) / 1000;\n            const timeEnd = new Date(responseArr[i].timeend * 1000).toLocaleString('en-US', {timeZone: systemTimezone});\n            const timeEndTimestamp = (new Date(timeEnd).getTime()) / 1000;\n            let secondsSinceDayStart = timeStartTimestamp - dayStart;\n            let leftMargin = 0;\n            let width = 0;\n\n            if (secondsSinceDayStart <= 0) {\n                secondsSinceDayStart = 0;\n                width = ((timeEndTimestamp - dayStart) / 60) * scaler;\n                responseArr[i].start = await getUserDate(responseArr[i].timestart, 'strftimedatetime');\n            } else {\n                leftMargin = (secondsSinceDayStart / 60) * scaler;\n                width = ((timeEndTimestamp - timeStartTimestamp) / 60) * scaler;\n                responseArr[i].start = await getUserDate(responseArr[i].timestart, 'strftimetime');\n            }\n\n            if (leftMargin + width > 100) {\n                width = 100 - leftMargin;\n            }\n\n            responseArr[i].leftmargin = leftMargin;\n            responseArr[i].width = width;\n            responseArr[i].end = await getUserDate(responseArr[i].timeend, 'strftimetime');\n        }\n\n        return new Promise((resolve) => {\n            resolve(responseArr);\n        });\n    };\n\n    /**\n     * Initialise the base modal to be used.\n     *\n     */\n    Dayview.display = function(date) {\n        modalObj.setBody(spinner);\n        modalObj.show();\n        let args = {\n            date: date,\n            modules: ['all']\n        };\n        let jsonArgs = JSON.stringify(args);\n        Ajax.call([{\n            methodname: 'local_assessfreq_get_day_events',\n            args: {jsondata: jsonArgs},\n        }])[0]\n        .then(formatData)\n        .then((responseArr) => {\n\n            let context = {rows: responseArr};\n            const year = responseArr[0].endyear;\n            const day = responseArr[0].endday;\n            const month = stringResult[(6 + parseInt(responseArr[0].endmonth))];\n            const dayDate = day + ' ' + month + ' ' + year;\n\n            modalObj.setTitle(dayViewTitle + ' ' + dayDate);\n            modalObj.setBody(Templates.render('local_assessfreq/dayview', context));\n\n        }).fail(() => {\n            Notification.exception(new Error('Failed to load day view'));\n        });\n    };\n\n    /**\n     * Initialise the base modal to be used.\n     *\n     * @param {integer} context The current context id.\n     */\n    Dayview.init = function() {\n        // Load the strings we'll need later.\n        Str.get_strings(stringArr).catch(() => { // Get required strings.\n            Notification.exception(new Error('Failed to load strings'));\n            return;\n        }).then(stringReturn => { // Save string to global to be used later.\n            stringResult = stringReturn;\n        });\n\n        // Get the system timzone.\n        Ajax.call([{\n            methodname: 'local_assessfreq_get_system_timezone',\n            args: {},\n        }], true, false)[0].then((response) => {\n            systemTimezone = response;\n            return;\n        }).fail(() => {\n            Notification.exception(new Error('Failed to get system timezone'));\n        });\n\n        Str.get_string('schedule', 'local_assessfreq').then((title) => {\n            dayViewTitle = title;\n\n            // Create the Modal.\n            ModalFactory.create({\n                type: ModalLarge.TYPE,\n                title: title,\n                body: spinner\n            })\n            .done((modal) => {\n                modalObj = modal;\n\n            });\n        }).catch(() => {\n            Notification.exception(new Error('Failed to load string: loading'));\n        });\n\n    };\n\n    return Dayview;\n});\n"],"file":"dayview.min.js"}