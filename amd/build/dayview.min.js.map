{"version":3,"sources":["../src/dayview.js"],"names":["define","Str","Notification","ModalFactory","ModalLarge","Templates","Ajax","UserDate","Dayview","modalObj","getUserDate","timestamp","format","Promise","resolve","get_string","then","dateformat","get","userdate","catch","exception","Error","formatData","response","responseArr","JSON","parse","scaler","i","length","year","endyear","month","endmonth","day","endday","dayStart","Date","getTime","secondsSinceDayStart","timestart","leftMargin","width","timeend","start","leftmargin","end","window","console","log","display","date","jsonArgs","stringify","modules","call","methodname","args","jsondata","setBody","render","rows","show","fail","init","title","create","type","TYPE","body","done","modal"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for heatmap calendar generation and display.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/str', 'core/notification', 'core/modal_factory', 'local_assessfreq/modal_large', 'core/templates', 'core/ajax',\n    'core/user_date'],\nfunction(Str, Notification, ModalFactory, ModalLarge, Templates, Ajax, UserDate) {\n\n    /**\n     * Module level variables.\n     */\n    var Dayview = {};\n    var modalObj;\n    const spinner = '<p class=\"text-center\">'\n        + '<i class=\"fa fa-spinner fa-pulse fa-2x fa-fw\"></i>'\n        + '</p>';\n\n    const getUserDate = function (timestamp, format) {\n        return new Promise((resolve) => {\n            Str.get_string(format, 'langconfig')\n            .then((dateformat) => {\n                let request = [\n                    {timestamp: timestamp,  format: dateformat}\n                ];\n                UserDate.get(request)\n                .then((userdate) => {\n                    resolve(userdate);\n                });\n            }).catch(() => {\n                Notification.exception(new Error('Failed to load string: date format'));\n            });\n        });\n    };\n\n    const formatData = async function(response) {\n        let responseArr = JSON.parse(response);\n\n        // We are displaying the event as a bar whose width represents the start and end time of the event.\n        // We need to scale the width of the bar to match the width of the container. Therefore 100% width of the container\n        // equals 24 hours (one day).\n        // There are 1440 mins per day. 1440 mins equals 100%, therefore 1 min = (100/1440)%. 5/72 == 100/1440.\n        let scaler = 5/72;\n\n        for (let i=0; i<responseArr.length; i++) {\n            const year = responseArr[i].endyear;\n            const month = (responseArr[i].endmonth) - 1; // Minus 1 for difference between months in PHP and JS.\n            const day = responseArr[i].endday;\n            const dayStart = (new Date(year, month, day).getTime()) / 1000;\n            let secondsSinceDayStart = responseArr[i].timestart - dayStart;\n            let leftMargin = 0;\n            let width = 0;\n\n            if (secondsSinceDayStart <= 0) {\n                secondsSinceDayStart = 0;\n                width = ((responseArr[i].timeend - dayStart) / 60) * scaler;\n                responseArr[i].start = await getUserDate(responseArr[i].timestart, 'strftimedatetime');\n            } else {\n                leftMargin = (secondsSinceDayStart / 60) * scaler;\n                width = ((responseArr[i].timeend - responseArr[i].timestart) / 60) * scaler;\n                responseArr[i].start = await getUserDate(responseArr[i].timestart, 'strftimetime');\n            }\n\n            if (leftMargin + width > 100) {\n                width = 100 - leftMargin;\n            }\n\n            responseArr[i].leftmargin = leftMargin;\n            responseArr[i].width = width;\n            responseArr[i].end = await getUserDate(responseArr[i].timeend, 'strftimetime');\n\n            window.console.log(responseArr[i]);\n        }\n\n        return new Promise((resolve) => {\n            resolve(responseArr);\n        });\n    };\n\n\n    /**\n     * Initialise the base modal to be used.\n     *\n     */\n    Dayview.display = function(date) {\n        let context = {};\n        let args = {\n                date: date,\n                modules: ['all']\n            };\n            let jsonArgs = JSON.stringify(args);\n        Ajax.call([{\n            methodname: 'local_assessfreq_get_day_events',\n            args: {jsondata: jsonArgs},\n        }])[0]\n        .then(formatData)\n        .then((responseArr) => {\n\n            let context = {rows: responseArr};\n            modalObj.setBody(Templates.render('local_assessfreq/dayview', context));\n            modalObj.show();\n\n        }).fail(() => {\n            Notification.exception(new Error('Failed to load day view'));\n        });\n\n        //modalObj.setTitle(title);\n        modalObj.setBody(Templates.render('local_assessfreq/dayview', context));\n        modalObj.show();\n\n\n    };\n\n    /**\n     * Initialise the base modal to be used.\n     *\n     * @param {integer} context The current context id.\n     */\n    Dayview.init = function() {\n\n        Str.get_string('schedule', 'local_assessfreq').then((title) => {\n            // Create the Modal.\n            ModalFactory.create({\n                type: ModalLarge.TYPE,\n                title: title,\n                body: spinner\n            })\n            .done((modal) => {\n                modalObj = modal;\n\n            });\n        }).catch(() => {\n            Notification.exception(new Error('Failed to load string: loading'));\n        });\n\n    };\n\n    return Dayview;\n});\n"],"file":"dayview.min.js"}