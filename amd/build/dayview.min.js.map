{"version":3,"sources":["../src/dayview.js"],"names":["define","Str","Notification","ModalFactory","ModalLarge","Templates","Ajax","Dayview","modalObj","formatData","response","Promise","resolve","display","date","jsonArgs","JSON","stringify","modules","call","methodname","args","jsondata","then","window","console","log","parse","context","rows","setBody","render","show","fail","exception","Error","init","get_string","title","create","type","TYPE","body","done","modal","catch"],"mappings":"AAuBAA,OAAM,4BAAC,CAAC,UAAD,CAAa,mBAAb,CAAkC,oBAAlC,CAAwD,8BAAxD,CAAwF,gBAAxF,CAA0G,WAA1G,CAAD,CACN,SAASC,CAAT,CAAcC,CAAd,CAA4BC,CAA5B,CAA0CC,CAA1C,CAAsDC,CAAtD,CAAiEC,CAAjE,CAAuE,IAK/DC,CAAAA,CAAO,CAAG,EALqD,CAM/DC,CAN+D,CAW7DC,CAAU,CAAG,SAASC,CAAT,CAAmB,CAClC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,CAAD,CAAa,CACxBA,CAAO,CAACF,CAAD,CACd,CAFM,CAGV,CAfkE,CAsBnEH,CAAO,CAACM,OAAR,CAAkB,SAASC,CAAT,CAAe,IAMrBC,CAAAA,CAAQ,CAAGC,IAAI,CAACC,SAAL,CAJR,CACHH,IAAI,CAAEA,CADH,CAEHI,OAAO,CAAE,CAAC,KAAD,CAFN,CAIQ,CANU,CAO7BZ,CAAI,CAACa,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,iCADL,CAEPC,IAAI,CAAE,CAACC,QAAQ,CAAEP,CAAX,CAFC,CAAD,CAAV,EAGI,CAHJ,EAICQ,IAJD,CAIMd,CAJN,EAKCc,IALD,CAKM,SAACb,CAAD,CAAc,CAChBc,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBV,IAAI,CAACW,KAAL,CAAWjB,CAAX,CAAnB,EACA,GAAIkB,CAAAA,CAAO,CAAG,CAACC,IAAI,CAAEb,IAAI,CAACW,KAAL,CAAWjB,CAAX,CAAP,CAAd,CACAF,CAAQ,CAACsB,OAAT,CAAiBzB,CAAS,CAAC0B,MAAV,CAAiB,0BAAjB,CAA6CH,CAA7C,CAAjB,EACApB,CAAQ,CAACwB,IAAT,EAEH,CAXD,EAWGC,IAXH,CAWQ,UAAM,CACV/B,CAAY,CAACgC,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,2BAAV,CAAvB,CACH,CAbD,EAgBA3B,CAAQ,CAACsB,OAAT,CAAiBzB,CAAS,CAAC0B,MAAV,CAAiB,0BAAjB,CAtBH,EAsBG,CAAjB,EACAvB,CAAQ,CAACwB,IAAT,EAGH,CA3BD,CAkCAzB,CAAO,CAAC6B,IAAR,CAAe,UAAW,CAEtBnC,CAAG,CAACoC,UAAJ,CAAe,SAAf,CAA0B,MAA1B,EAAkCd,IAAlC,CAAuC,SAACe,CAAD,CAAW,CAE9CnC,CAAY,CAACoC,MAAb,CAAoB,CAChBC,IAAI,CAAEpC,CAAU,CAACqC,IADD,CAEhBH,KAAK,CAAEA,CAFS,CAGhBI,IAAI,oFAHY,CAApB,EAKCC,IALD,CAKM,SAACC,CAAD,CAAW,CACbpC,CAAQ,CAAGoC,CAEd,CARD,CASH,CAXD,EAWGC,KAXH,CAWS,UAAM,CACX3C,CAAY,CAACgC,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,gCAAV,CAAvB,CACH,CAbD,CAeH,CAjBD,CAmBA,MAAO5B,CAAAA,CACV,CA7EK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for heatmap calendar generation and display.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/str', 'core/notification', 'core/modal_factory', 'local_assessfreq/modal_large', 'core/templates', 'core/ajax'],\nfunction(Str, Notification, ModalFactory, ModalLarge, Templates, Ajax) {\n\n    /**\n     * Module level variables.\n     */\n    var Dayview = {};\n    var modalObj;\n    const spinner = '<p class=\"text-center\">'\n        + '<i class=\"fa fa-spinner fa-pulse fa-2x fa-fw\"></i>'\n        + '</p>';\n\n    const formatData = function(response) {\n        return new Promise((resolve) => {\n                resolve(response);\n        });\n    };\n\n\n    /**\n     * Initialise the base modal to be used.\n     *\n     */\n    Dayview.display = function(date) {\n        let context = {};\n        let args = {\n                date: date,\n                modules: ['all']\n            };\n            let jsonArgs = JSON.stringify(args);\n        Ajax.call([{\n            methodname: 'local_assessfreq_get_day_events',\n            args: {jsondata: jsonArgs},\n        }])[0]\n        .then(formatData)\n        .then((response) => {\n            window.console.log(JSON.parse(response));\n            let context = {rows: JSON.parse(response)};\n            modalObj.setBody(Templates.render('local_assessfreq/dayview', context));\n            modalObj.show();\n\n        }).fail(() => {\n            Notification.exception(new Error('Failed to get heat colors'));\n        });\n\n        //modalObj.setTitle(title);\n        modalObj.setBody(Templates.render('local_assessfreq/dayview', context));\n        modalObj.show();\n\n\n    };\n\n    /**\n     * Initialise the base modal to be used.\n     *\n     * @param {integer} context The current context id.\n     */\n    Dayview.init = function() {\n\n        Str.get_string('loading', 'core').then((title) => {\n            // Create the Modal.\n            ModalFactory.create({\n                type: ModalLarge.TYPE,\n                title: title,\n                body: spinner\n            })\n            .done((modal) => {\n                modalObj = modal;\n\n            });\n        }).catch(() => {\n            Notification.exception(new Error('Failed to load string: loading'));\n        });\n\n    };\n\n    return Dayview;\n});\n"],"file":"dayview.min.js"}