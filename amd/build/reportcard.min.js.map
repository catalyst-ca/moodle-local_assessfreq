{"version":3,"sources":["../src/reportcard.js"],"names":["define","Fragment","Templates","Notification","Ajax","Reportcard","contextid","yearselect","updateUserPreferences","type","value","call","methodname","args","preferences","fail","exception","Error","assessByMonth","cardElement","document","getElementById","params","JSON","stringify","loadFragment","done","response","window","console","log","then","yearButtonAction","event","element","target","tagName","toLowerCase","dataset","year","yeartitle","getElementsByClassName","innerHTML","init","context","cardsYearSelectElement","addEventListener"],"mappings":"AAuBAA,OAAM,+BACF,CAAC,eAAD,CAAkB,gBAAlB,CAAoC,mBAApC,CAAyD,WAAzD,CADE,CAEF,SAASC,CAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAA4CC,CAA5C,CAAkD,IAK9CC,CAAAA,CAAU,CAAG,EALiC,CAM9CC,CAN8C,CAO9CC,CAP8C,CAejD,QAASC,CAAAA,CAAT,CAA+BC,CAA/B,CAAqCC,CAArC,CAA4C,CAazCN,CAAI,CAACO,IAAL,CAAU,CAZI,CACVC,UAAU,CAAE,mCADF,CAEVC,IAAI,CAAE,CACFC,WAAW,CAAE,CACT,CACIL,IAAI,CAAEA,CADV,CAEIC,KAAK,CAAEA,CAFX,CADS,CADX,CAFI,CAYJ,CAAV,EAAqB,CAArB,EACCK,IADD,CACM,UAAW,CACbZ,CAAY,CAACa,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,kCAAV,CAAvB,CACH,CAHD,CAIH,CAED,QAASC,CAAAA,CAAT,EAAyB,IAEjBC,CAAAA,CAAW,CAAGC,QAAQ,CAACC,cAAT,qCAFG,CAUjBC,CAAM,CAAG,CAAC,KAAQC,IAAI,CAACC,SAAL,CAAe,EAAf,CAAT,CAVQ,CAWrBvB,CAAQ,CAACwB,YAAT,CAAsB,kBAAtB,CAA0C,qBAA1C,CAAiEnB,CAAjE,CAA4EgB,CAA5E,EACCI,IADD,CACM,SAASC,CAAT,CAAmB,CAErBC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBH,CAAnB,CAEH,CALD,EAKGZ,IALH,CAKQ,UAAW,CACfZ,CAAY,CAACa,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,iCAAV,CAAvB,CAEH,CARD,EAQGc,IARH,CAQQ,UAAW,CAElB,CAVD,CAWH,CAED,QAASC,CAAAA,CAAT,CAA0BC,CAA1B,CAAiC,CAC7B,GAAIC,CAAAA,CAAO,CAAGD,CAAK,CAACE,MAApB,CAEA,GAAsC,GAAlC,GAAAD,CAAO,CAACE,OAAR,CAAgBC,WAAhB,IAAyCH,CAAO,CAACI,OAAR,CAAgBC,IAAhB,EAAwBhC,CAArE,CAAiF,CAC7EA,CAAU,CAAG2B,CAAO,CAACI,OAAR,CAAgBC,IAA7B,CAGA/B,CAAqB,CAAC,2CAAD,CAA8CD,CAA9C,CAArB,CAGA,GAAIiC,CAAAA,CAAS,CAAGpB,QAAQ,CAACC,cAAT,CAAwB,kCAAxB,EACKoB,sBADL,CAC4B,uBAD5B,EACqD,CADrD,CAAhB,CAEAD,CAAS,CAACE,SAAV,CAAsBnC,CACzB,CACJ,CAODF,CAAU,CAACsC,IAAX,CAAkB,SAASC,CAAT,CAAkB,CAChCtC,CAAS,CAAGsC,CAAZ,CAEA,GAAIC,CAAAA,CAAsB,CAAGzB,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,CAA7B,CACAd,CAAU,CAAGsC,CAAsB,CAACJ,sBAAvB,CAA8C,QAA9C,EAAwD,CAAxD,EAA2DH,OAA3D,CAAmEC,IAAhF,CACAM,CAAsB,CAACC,gBAAvB,CAAwC,OAAxC,CAAiDd,CAAjD,EAEAd,CAAa,EAEhB,CATD,CAWA,MAAOb,CAAAA,CACV,CA7FK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for report card display and processing.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    ['core/fragment', 'core/templates', 'core/notification', 'core/ajax'],\n    function(Fragment, Templates, Notification, Ajax) {\n\n    /**\n     * Module level variables.\n     */\n    var Reportcard = {};\n    var contextid;\n    var yearselect;\n\n    /**\n     * Generic handler to persist user preferences\n     *\n     * @param {string} type The name of the attribute you're updating\n     * @param {string} value The value of the attribute you're updating\n     */\n     function updateUserPreferences(type, value) {\n        var request = {\n            methodname: 'core_user_update_user_preferences',\n            args: {\n                preferences: [\n                    {\n                        type: type,\n                        value: value\n                    }\n                ]\n            }\n        };\n\n        Ajax.call([request])[0]\n        .fail(function() {\n            Notification.exception(new Error('Failed to update user preference'));\n        });\n    }\n\n    function assessByMonth() {\n        var cardid = 'local-assessfreq-assess-due-month';\n        var cardElement = document.getElementById(cardid);\n\n        // Call an ajax method that returns all the info we need.\n        // This includes:\n        // Lang strings for the block.\n        // Values for year selection.\n        // Initial data set.\n\n        var params = {'data': JSON.stringify([])};\n        Fragment.loadFragment('local_assessfreq', 'get_assess_by_month', contextid, params)\n        .done(function(response) {\n            // Load card body.\n            window.console.log(response);\n            return;\n        }).fail(function() {\n            Notification.exception(new Error('Failed to load card year filter'));\n            return;\n        }).then(function() {\n            // And then?\n        });\n    }\n\n    function yearButtonAction(event) {\n        var element = event.target;\n\n        if (element.tagName.toLowerCase() === 'a' && element.dataset.year != yearselect) { // Only act on certain elements.\n            yearselect = element.dataset.year;\n\n            // Save selection as a user preference.\n            updateUserPreferences('local_assessfreq_overview_year_preference', yearselect);\n\n            // Update card data based on selected year.\n            var yeartitle = document.getElementById('local-assessfreq-report-overview')\n                                .getElementsByClassName('local-assessfreq-year')[0];\n            yeartitle.innerHTML = yearselect;\n        }\n    }\n\n    /**\n     * Initialise method for report card rendering.\n     *\n     * @param {integer} context The current context id.\n     */\n    Reportcard.init = function(context) {\n        contextid = context;\n\n        var cardsYearSelectElement = document.getElementById('local-assessfreq-cards-year');\n        yearselect = cardsYearSelectElement.getElementsByClassName('active')[0].dataset.year;\n        cardsYearSelectElement.addEventListener(\"click\", yearButtonAction);\n\n        assessByMonth(); // Process loading for the assessments by month card.\n\n    };\n\n    return Reportcard;\n});\n"],"file":"reportcard.min.js"}