{"version":3,"sources":["../src/chart_data.js"],"names":["cards","contextId","fragment","template","getCardCharts","quizId","hoursFilter","yearSelect","forEach","cardData","cardElement","document","getElementById","cardId","spinner","getElementsByClassName","chartBody","values","call","hoursahead","hoursbehind","quiz","year","params","JSON","stringify","classList","remove","Fragment","loadFragment","done","response","resObj","parse","hasdata","context","chart","aspect","Templates","render","html","js","add","replaceNodeContents","fail","Notification","exception","Error","Str","get_string","then","str","noDatastr","createElement","innerHTML","outerHTML","catch","init","cardsArray","contextIdChart","fragmentChart","templateChart"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Chart data JS module.\n *\n * @module     local_assessfreq/char_data\n * @package    local_assessfreq\n * @copyright  2020 Guillermo Gomez <guillermogomez@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport Templates from 'core/templates';\n\n/**\n * Module level variables.\n */\nlet cards;\nlet contextId;\nlet fragment;\nlet template;\n\n/**\n * For each of the cards on the dashboard get their corresponding chart data.\n * Data is based on the year variable from the corresponding dropdown.\n * Chart data is loaded via ajax.\n *\n * @param {int|null} quizId The quiz Id.\n * @param {array|null} hoursFilter Array with hour ahead or behind preference.\n * @param {int|null} yearSelect Year selected.\n */\nexport const getCardCharts = (quizId, hoursFilter, yearSelect) => {\n    cards.forEach((cardData) => {\n        let cardElement = document.getElementById(cardData.cardId);\n        let spinner = cardElement.getElementsByClassName('overlay-icon-container')[0];\n        let chartBody = cardElement.getElementsByClassName('chart-body')[0];\n        let values = {'call': cardData.call};\n        // Add values to Object depending on dashboard type.\n        if (hoursFilter) {\n            values.hoursahead = hoursFilter[0];\n            values.hoursbehind = hoursFilter[1];\n        }\n        if (quizId) {\n            values.quiz = quizId;\n        }\n        if (yearSelect) {\n            values.year = yearSelect;\n        }\n        let params = {'data': JSON.stringify(values)};\n\n        spinner.classList.remove('hide'); // Show sinner if not already shown.\n        Fragment.loadFragment('local_assessfreq', fragment, contextId, params)\n            .done((response) => {\n                let resObj = JSON.parse(response);\n                if (resObj.hasdata === true) {\n                    let context = {\n                        'withtable': true, 'chartdata': JSON.stringify(resObj.chart)\n                    };\n                    if (typeof cardData.aspect !== 'undefined') {\n                        context.aspect = cardData.aspect;\n                    }\n                    Templates.render(template, context).done((html, js) => {\n                        spinner.classList.add('hide'); // Hide spinner if not already hidden.\n                        // Load card body.\n                        Templates.replaceNodeContents(chartBody, html, js);\n                    }).fail(() => {\n                        Notification.exception(new Error('Failed to load chart template.'));\n                        return;\n                    });\n                    return;\n                } else {\n                    Str.get_string('nodata', 'local_assessfreq').then((str) => {\n                        const noDatastr = document.createElement('h3');\n                        noDatastr.innerHTML = str;\n                        chartBody.innerHTML = noDatastr.outerHTML;\n                        spinner.classList.add('hide'); // Hide spinner if not already hidden.\n                        return;\n                    }).catch(() => {\n                        Notification.exception(new Error('Failed to load string: nodata'));\n                    });\n                }\n            }).fail(() => {\n            Notification.exception(new Error('Failed to load card.'));\n            return;\n        });\n    });\n};\n\n/**\n * Initialise method for table handler.\n *\n * @param {array} cardsArray Cards array.\n * @param {int} contextIdChart The context id.\n * @param {string} fragmentChart Fragment name.\n * @param {string} templateChart Template name.\n */\nexport const init = (cardsArray, contextIdChart, fragmentChart, templateChart) => {\n    cards = cardsArray;\n    contextId = contextIdChart;\n    fragment = fragmentChart;\n    template = templateChart;\n};\n"],"file":"chart_data.min.js"}