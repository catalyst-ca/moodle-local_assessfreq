{"version":3,"file":"form_modal.min.js","sources":["../src/form_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for report card display and processing.\n *\n * @package\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    ['core/str', 'core/modal', 'local_assessfreq/modal_large', 'core/fragment', 'core/ajax', 'core/templates'],\n    function(Str, Modal, ModalLarge, Fragment, Ajax, Templates) {\n\n        /**\n         * Module level variables.\n         */\n        let FormModal = {};\n        let contextid;\n        let iscourse;\n        let modalObj;\n        let resetOptions = [];\n\n        const spinner = '<p class=\"text-center\">'\n            + '<i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>'\n            + '</p>';\n\n        const observerConfig = {attributes: true, childList: false, subtree: true};\n\n        /**\n         * Initialise method for activity dashboard rendering.\n         * @param {int} context\n         * @param {boolean} course\n         */\n        FormModal.init = function(context, course) {\n            contextid = context;\n            iscourse = course;\n\n            createModal();\n            document.getElementById('local-assessfreq-find-activity').addEventListener('click', displayModalForm);\n        };\n\n        /**\n         * Create the modal window.\n         *\n         * @private\n         */\n        const createModal = function() {\n            // eslint-disable-next-line promise/catch-or-return,promise/always-return\n            Str.get_string('modal:loading', 'assessfreqreport_activity_dashboard', '', '').then((title) => {\n                // Create the Modal.\n                Modal.create({\n                    type: ModalLarge.TYPE,\n                    title: title,\n                    body: spinner,\n                    large: true\n                }).then((modal) => {\n                    modalObj = modal;\n\n                    // Explicitly handle form click events.\n                    modalObj.getRoot().on('click', '#id_submitbutton', processModalForm);\n                    modalObj.getRoot().on('click', '#id_cancel', (e) => {\n                        e.preventDefault();\n                        modalObj.setBody(spinner);\n                        modalObj.hide();\n                    });\n                });\n            });\n        };\n\n        /**\n         * Display the Modal form.\n         */\n        const displayModalForm = function() {\n            updateModalBody();\n            modalObj.show();\n        };\n\n        /**\n         * Updates the body of the modal window.\n         *\n         * @param {Object} formdata\n         * @private\n         */\n        const updateModalBody = function(formdata = {}) {\n\n            let params = {\n                'jsonformdata': JSON.stringify(formdata)\n            };\n\n            // eslint-disable-next-line promise/catch-or-return\n            getOptionPlaceholders()\n                // eslint-disable-next-line promise/always-return\n            .then(() => {\n                // eslint-disable-next-line promise/always-return\n                Str.get_string('modal:searchactivity', 'assessfreqreport_activity_dashboard', '', '').then((title) => {\n                    modalObj.setTitle(title);\n                    Fragment.loadFragment('assessfreqreport_activity_dashboard', 'search_form', contextid, params)\n                        .done((response, js) => {\n                            modalObj.setBody(response);\n                            if (js) {\n                                Templates.runTemplateJS(js);\n                            }\n                            if (iscourse) {\n                                updateActivities(document.getElementsByName(\"coursechoice\")[0].value);\n                            }\n                        });\n                    let modalContainer = document.querySelectorAll('[data-region*=\"modal-container\"]')[0];\n                    observer.observe(modalContainer, observerConfig);\n                });\n            });\n        };\n\n        const updateActivities = function(courseid) {\n            Ajax.call([{\n                methodname: 'local_assessfreq_get_activities',\n                args: {\n                    courseid: courseid\n                },\n            }])[0].done((response) => {\n                let activityArray = JSON.parse(response);\n                let selectElement = document.getElementById('id_activity');\n                let selectElementLength = selectElement.options.length;\n                if (document.getElementById('noactivitywarning') !== null) {\n                    document.getElementById('noactivitywarning').remove();\n                }\n                // Clear exisitng options.\n                for (let j = selectElementLength - 1; j >= 0; j--) {\n                    selectElement.options[j] = null;\n                }\n\n                if (activityArray.length > 0) {\n                    // Add new options.\n                    for (let k = 0; k < activityArray.length; k++) {\n                        let opt = activityArray[k];\n                        let el = document.createElement('option');\n                        el.textContent = opt.name;\n                        el.value = opt.id;\n                        selectElement.appendChild(el);\n                    }\n                    selectElement.removeAttribute('disabled');\n                    if (document.getElementById('noactivitywarning') !== null) {\n                        document.getElementById('noactivitywarning').remove();\n                    }\n                } else {\n                    resetOptions.forEach((option) => {\n                        selectElement.appendChild(option);\n                    });\n                    document.getElementById('id_activity').value = 0;\n                    selectElement.disabled = true;\n                }\n            });\n        };\n\n        const ObserverCallback = function(mutationsList) {\n            for (let i = 0; i < mutationsList.length; i++) {\n                let element = mutationsList[i].target;\n                if (element.tagName.toLowerCase() === 'span' && element.classList.contains('badge')) {\n                    element.addEventListener('click', updateModalBody);\n                    updateActivities(mutationsList[i].target.dataset.value);\n                    break;\n                }\n            }\n        };\n\n        const observer = new MutationObserver(ObserverCallback);\n\n        const getOptionPlaceholders = function() {\n            return new Promise((resolve) => {\n                const stringArr = [\n                    {key: 'modal:selectcourse', component: 'assessfreqreport_activity_dashboard'},\n                    {key: 'modal:loadingactivity', component: 'assessfreqreport_activity_dashboard'},\n                ];\n\n                Str.get_strings(stringArr).then(stringReturn => { // Save string to global to be used later.\n                    // eslint-disable-next-line promise/always-return\n                    for (let i = 0; i < stringReturn.length; i++) {\n                        let el = document.createElement('option');\n                        el.textContent = stringReturn[i];\n                        el.value = 0 - i;\n                        resetOptions.push(el);\n                    }\n                    resolve();\n                });\n            });\n        };\n\n        /**\n         * Updates Moodle form with selected information.\n         *\n         * @param {Object} e\n         * @private\n         */\n        const processModalForm = function(e) {\n            e.preventDefault(); // Stop modal from closing.\n\n            let activityElement = document.getElementById('id_activity');\n            let activityId = activityElement.options[activityElement.selectedIndex].value;\n            let courseId = document.getElementsByName(\"coursechoice\")[0].value;\n\n            if (courseId === undefined || activityId < 1) {\n                if (document.getElementById('noactivitywarning') === null) {\n                    // eslint-disable-next-line promise/always-return\n                    Str.get_string('modal:noactivityselected', 'assessfreqreport_activity_dashboard', '', '').then((warning) => {\n                        let element = document.createElement('div');\n                        element.innerHTML = warning;\n                        element.id = 'noactivitywarning';\n                        element.classList.add('alert', 'alert-danger');\n                        modalObj.getBody().prepend(element);\n                    });\n                }\n            } else {\n                modalObj.hide(); // Close modal.\n                modalObj.setBody(''); // Cleaer form.\n                observer.disconnect(); // Remove observer.\n\n                // Trigger redirect with activityid.\n                let params = new URLSearchParams(location.search);\n                params.set('activityid', activityId);\n                window.location.search = params.toString();\n            }\n\n        };\n\n        return FormModal;\n    }\n);\n"],"names":["define","Str","Modal","ModalLarge","Fragment","Ajax","Templates","contextid","iscourse","modalObj","FormModal","resetOptions","spinner","observerConfig","attributes","childList","subtree","init","context","course","createModal","document","getElementById","addEventListener","displayModalForm","get_string","then","title","create","type","TYPE","body","large","modal","getRoot","on","processModalForm","e","preventDefault","setBody","hide","updateModalBody","show","formdata","params","JSON","stringify","getOptionPlaceholders","setTitle","loadFragment","done","response","js","runTemplateJS","updateActivities","getElementsByName","value","modalContainer","querySelectorAll","observer","observe","courseid","call","methodname","args","activityArray","parse","selectElement","selectElementLength","options","length","remove","j","k","opt","el","createElement","textContent","name","id","appendChild","removeAttribute","forEach","option","disabled","MutationObserver","mutationsList","i","element","target","tagName","toLowerCase","classList","contains","dataset","Promise","resolve","get_strings","key","component","stringReturn","push","activityElement","activityId","selectedIndex","undefined","warning","innerHTML","add","getBody","prepend","disconnect","URLSearchParams","location","search","set","window","toString"],"mappings":"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"}