{"version":3,"file":"student_search.min.js","sources":["../src/student_search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Chart data JS module.\n *\n * @module     assessfreqreport/student_search\n * @package\n * @copyright  Simon Thornett <simon.thornett@catalyst-eu.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport OverrideModal from 'local_assessfreq/override_modal';\nimport TableHandler from 'local_assessfreq/table_handler';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\n\n/**\n * Module level variables.\n */\nlet contextid;\n\n/**\n * Init function.\n * @param {int} context\n */\nexport const init = (context) => {\n\n    contextid = context;\n\n    let table = new TableHandler(\n        0,\n        contextid,\n        'assessfreqreport-student-search-table',\n        'assessfreqreport_student_search',\n        'get_student_search_table',\n        'assessfreqreport_student_search_table_rows_preference',\n        'assessfreqreport_student_search_table_sort_preference',\n        'assessfreqreport-student-search-table-search',\n        'assessfreqreport-student-search-table',\n        'local_assessfreq_set_table_preference'\n    );\n\n    OverrideModal.init(\n        context,\n        'quiz',\n        table\n    );\n\n    table.getTable();\n\n    // Add required initial event listeners.\n    let tableSearchInputElement = document.getElementById('assessfreqreport-student-search-table-search');\n    let tableSearchResetElement = document.getElementById('assessfreqreport-student-search-table-search-reset');\n    let tableSearchRowsElement = document.getElementById('assessfreqreport-student-search-table-rows');\n    let tableSearchAheadElement = document.getElementById('assessfreqreport-student-search-hoursahead');\n    let tableSearchBehindElement = document.getElementById('assessfreqreport-student-search-hoursbehind');\n\n    tableSearchInputElement.addEventListener('keyup', table.tableSearch);\n    tableSearchInputElement.addEventListener('paste', table.tableSearch);\n    tableSearchResetElement.addEventListener('click', table.tableSearchReset);\n    tableSearchRowsElement.addEventListener('click', table.tableSearchRowSet);\n    tableSearchAheadElement.addEventListener('click', tableSearchAheadSet);\n    tableSearchBehindElement.addEventListener('click', tableSearchBehindSet);\n};\n\n/**\n * Process the hours ahead event from the student table.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst tableSearchAheadSet = (event) => {\n    event.preventDefault();\n    if (event.target.tagName.toLowerCase() === 'a') {\n        // Don't process already selected links.\n        if (event.target.classList.contains('active')) {\n            return;\n        }\n        let hours = event.target.dataset.metric;\n        UserPreference.setUserPreference('assessfreqreport_student_search_hoursahead_preference', hours);\n        // Reload based on selected year.\n        location.reload();\n    }\n};\n\n/**\n * Process the hours behind event from the student table.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst tableSearchBehindSet = (event) => {\n    event.preventDefault();\n    if (event.target.tagName.toLowerCase() === 'a') {\n        // Don't process already selected links.\n        if (event.target.classList.contains('active')) {\n            return;\n        }\n        let hours = event.target.dataset.metric;\n        UserPreference.setUserPreference('assessfreqreport_student_search_hoursbehind_preference', hours);\n        // Reload based on selected year.\n        location.reload();\n    }\n};\n"],"names":["contextid","context","table","TableHandler","init","getTable","tableSearchInputElement","document","getElementById","tableSearchResetElement","tableSearchRowsElement","tableSearchAheadElement","tableSearchBehindElement","addEventListener","tableSearch","tableSearchReset","tableSearchRowSet","tableSearchAheadSet","tableSearchBehindSet","event","preventDefault","target","tagName","toLowerCase","classList","contains","hours","dataset","metric","UserPreference","setUserPreference","location","reload"],"mappings":";;;;;;;;SA+BIA,+3BAMiBC,UAEjBD,UAAYC,YAERC,MAAQ,IAAIC,uBACZ,EACAH,UACA,wCACA,kCACA,2BACA,wDACA,wDACA,+CACA,wCACA,iEAGUI,KACVH,QACA,OACAC,OAGJA,MAAMG,eAGFC,wBAA0BC,SAASC,eAAe,gDAClDC,wBAA0BF,SAASC,eAAe,sDAClDE,uBAAyBH,SAASC,eAAe,8CACjDG,wBAA0BJ,SAASC,eAAe,8CAClDI,yBAA2BL,SAASC,eAAe,+CAEvDF,wBAAwBO,iBAAiB,QAASX,MAAMY,aACxDR,wBAAwBO,iBAAiB,QAASX,MAAMY,aACxDL,wBAAwBI,iBAAiB,QAASX,MAAMa,kBACxDL,uBAAuBG,iBAAiB,QAASX,MAAMc,mBACvDL,wBAAwBE,iBAAiB,QAASI,qBAClDL,yBAAyBC,iBAAiB,QAASK,6BAQjDD,oBAAuBE,WACzBA,MAAMC,iBACqC,MAAvCD,MAAME,OAAOC,QAAQC,cAAuB,IAExCJ,MAAME,OAAOG,UAAUC,SAAS,qBAGhCC,MAAQP,MAAME,OAAOM,QAAQC,OACjCC,eAAeC,kBAAkB,wDAAyDJ,OAE1FK,SAASC,WASXd,qBAAwBC,WAC1BA,MAAMC,iBACqC,MAAvCD,MAAME,OAAOC,QAAQC,cAAuB,IAExCJ,MAAME,OAAOG,UAAUC,SAAS,qBAGhCC,MAAQP,MAAME,OAAOM,QAAQC,OACjCC,eAAeC,kBAAkB,yDAA0DJ,OAE3FK,SAASC"}