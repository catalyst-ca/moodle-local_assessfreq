{"version":3,"file":"heatmap.min.js","sources":["../src/heatmap.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Chart data JS module.\n *\n * @module     assessfreqreport/heatmap\n * @package\n * @copyright  Simon Thornett <simon.thornett@catalyst-eu.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport ModalLarge from 'local_assessfreq/modal_large';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\n\n/**\n * Init function.\n * @param {int} courseid the course id to get events for.\n */\nexport const init = (courseid) => {\n\n    // Set up event listener and related actions for heatmap interactions.\n    heatmapSelector(courseid);\n\n    // Set up event listener and related actions for module dropdown on heatmp.\n    moduleDropdown();\n\n    // Set up event listener and related actions for year dropdown on heatmp.\n    yearDropdown();\n\n    // Set up event listener and related actions for metric dropdown on heatmp.\n    metricDropdown();\n};\n\n/**\n * Add the event listeners to the heatmap items to trigger the dialog.\n * @param {int} courseid the course id to get events for.\n */\nexport const heatmapSelector = (courseid) => {\n    const events = document.getElementsByClassName(\"show-dialog\");\n\n    events.forEach(el => el.addEventListener('click', event => {\n\n        let addBlockModal = null;\n\n        ModalFactory.create({\n            type: ModalLarge.TYPE,\n            large: true,\n            body: ''\n        }).done(modal => {\n            addBlockModal = modal;\n\n            let args = {\n                date: event.target.dataset.target,\n                courseid: courseid\n            };\n            let jsonArgs = JSON.stringify(args);\n            Ajax.call([{\n                methodname: 'assessfreqreport_heatmap_external_get_day_events',\n                args: {jsondata: jsonArgs},\n            }])[0]\n                // eslint-disable-next-line promise/always-return\n                .then((responseArr) => {\n                    let context = JSON.parse(responseArr);\n                    modal.setBody(Templates.render('assessfreqreport_heatmap/dayview', {rows: context}));\n                    modal.setTitle(\n                        context[0].endday +\n                        ' ' +\n                        Intl.DateTimeFormat('en', {month: 'long'}).format(new Date(context[0].endmonth)) +\n                        ' ' +\n                        context[0].endyear\n                    );\n                }).fail(() => {\n                    Notification.exception(new Error('Failed to load day view'));\n            });\n            modal.show();\n        })\n        .catch(() => {\n            addBlockModal.destroy();\n        });\n\n        // Stop the event firing.\n        event.preventDefault();\n    }));\n};\n\n/**\n * Add the event listeners to the modules in the module select dropdown.\n */\nconst moduleDropdown = () => {\n    let links = document.getElementsByClassName('local-assessfreq-report-heatmap-filter-type-option');\n    let all = links[0];\n    let modules = [];\n\n    for (let i = 0; i < links.length; i++) {\n        let module = links[i].dataset.module;\n\n        if (module.toLowerCase() === 'all') {\n            links[i].addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                // Remove active class from all other links.\n                for (let j = 0; j < links.length; j++) {\n                    links[j].classList.remove('active');\n                }\n                event.target.classList.toggle('active');\n            });\n        } else if (module.toLowerCase() === 'close') {\n            links[i].addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const dropdownmenu = document.getElementById('local-assessfreq-report-heatmap-filter-type-options');\n                dropdownmenu.classList.remove('show');\n\n                for (let i = 0; i < links.length; i++) {\n                    if (links[i].classList.contains('active')) {\n                        let module = links[i].dataset.module;\n                        modules.push(module);\n                    }\n                }\n\n                // Save selection as a user preference.\n                UserPreference.setUserPreference('assessfreqreport_heatmap_modules_preference', JSON.stringify(modules));\n\n                // Reload based on selected year.\n                location.reload();\n            });\n        } else {\n            links[i].addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                all.classList.remove('active');\n\n                event.target.classList.toggle('active');\n            });\n        }\n    }\n};\n\n/**\n * Get and process the selected year from the dropdown and update the corresponding user perference.\n *\n */\nconst yearDropdown = () => {\n\n    let targets = document.getElementsByClassName('local-assessfreq-report-heatmap-filter-year-option');\n    targets.forEach(el => el.addEventListener('click', event => {\n        event.preventDefault();\n        let element = event.target;\n\n        // Don't process already selected links.\n        if (element.classList.contains('active')) {\n            return;\n        }\n\n        // Save selection as a user preference.\n        UserPreference.setUserPreference('assessfreqreport_heatmap_year_preference', element.dataset.year);\n\n        // Reload based on selected year.\n        location.reload();\n    }));\n};\n\n/**\n * Get and process the selected metric from the dropdown and update the corresponding user perference.\n *\n */\nconst metricDropdown = () => {\n\n    let targets = document.getElementsByClassName('local-assessfreq-report-heatmap-filter-metric-option');\n    targets.forEach(el => el.addEventListener('click', event => {\n        event.preventDefault();\n        let element = event.target;\n\n        // Don't process already selected links.\n        if (element.classList.contains('active')) {\n            return;\n        }\n\n        // Save selection as a user preference.\n        UserPreference.setUserPreference('assessfreqreport_heatmap_metric_preference', element.dataset.metric);\n\n        // Reload based on selected year.\n        location.reload();\n    }));\n};\n"],"names":["courseid","heatmapSelector","moduleDropdown","yearDropdown","metricDropdown","document","getElementsByClassName","forEach","el","addEventListener","event","addBlockModal","create","type","ModalLarge","TYPE","large","body","done","modal","args","date","target","dataset","jsonArgs","JSON","stringify","call","methodname","jsondata","then","responseArr","context","parse","setBody","Templates","render","rows","setTitle","endday","Intl","DateTimeFormat","month","format","Date","endmonth","endyear","fail","exception","Error","show","catch","destroy","preventDefault","links","all","modules","i","length","module","toLowerCase","stopPropagation","j","classList","remove","toggle","getElementById","contains","push","UserPreference","setUserPreference","location","reload","element","year","metric"],"mappings":";;;;;;;;mhCAmCqBA,WAGjBC,gBAAgBD,UAGhBE,iBAGAC,eAGAC,wBAOSH,gBAAmBD,WACbK,SAASC,uBAAuB,eAExCC,SAAQC,IAAMA,GAAGC,iBAAiB,SAASC,YAE1CC,cAAgB,4BAEPC,OAAO,CAChBC,KAAMC,qBAAWC,KACjBC,OAAO,EACPC,KAAM,KACPC,MAAKC,QACJR,cAAgBQ,UAEZC,KAAO,CACPC,KAAMX,MAAMY,OAAOC,QAAQD,OAC3BtB,SAAUA,UAEVwB,SAAWC,KAAKC,UAAUN,oBACzBO,KAAK,CAAC,CACPC,WAAY,mDACZR,KAAM,CAACS,SAAUL,aACjB,GAECM,MAAMC,kBACCC,QAAUP,KAAKQ,MAAMF,aACzBZ,MAAMe,QAAQC,mBAAUC,OAAO,mCAAoC,CAACC,KAAML,WAC1Eb,MAAMmB,SACFN,QAAQ,GAAGO,OACX,IACAC,KAAKC,eAAe,KAAM,CAACC,MAAO,SAASC,OAAO,IAAIC,KAAKZ,QAAQ,GAAGa,WACtE,IACAb,QAAQ,GAAGc,YAEhBC,MAAK,2BACSC,UAAU,IAAIC,MAAM,+BAEzC9B,MAAM+B,UAETC,OAAM,KACHxC,cAAcyC,aAIlB1C,MAAM2C,sEAORnD,eAAiB,SACfoD,MAAQjD,SAASC,uBAAuB,sDACxCiD,IAAMD,MAAM,GACZE,QAAU,OAET,IAAIC,EAAI,EAAGA,EAAIH,MAAMI,OAAQD,IAAK,KAC/BE,OAASL,MAAMG,GAAGlC,QAAQoC,OAED,QAAzBA,OAAOC,cACPN,MAAMG,GAAGhD,iBAAiB,SAASC,QAC/BA,MAAM2C,iBACN3C,MAAMmD,sBAED,IAAIC,EAAI,EAAGA,EAAIR,MAAMI,OAAQI,IAC9BR,MAAMQ,GAAGC,UAAUC,OAAO,UAE9BtD,MAAMY,OAAOyC,UAAUE,OAAO,aAEF,UAAzBN,OAAOC,cACdN,MAAMG,GAAGhD,iBAAiB,SAASC,QAC/BA,MAAM2C,iBACN3C,MAAMmD,kBAEexD,SAAS6D,eAAe,uDAChCH,UAAUC,OAAO,YAEzB,IAAIP,EAAI,EAAGA,EAAIH,MAAMI,OAAQD,OAC1BH,MAAMG,GAAGM,UAAUI,SAAS,UAAW,KACnCR,OAASL,MAAMG,GAAGlC,QAAQoC,OAC9BH,QAAQY,KAAKT,QAKrBU,eAAeC,kBAAkB,8CAA+C7C,KAAKC,UAAU8B,UAG/Fe,SAASC,YAGblB,MAAMG,GAAGhD,iBAAiB,SAASC,QAC/BA,MAAM2C,iBACN3C,MAAMmD,kBAENN,IAAIQ,UAAUC,OAAO,UAErBtD,MAAMY,OAAOyC,UAAUE,OAAO,eAUxC9D,aAAe,KAEHE,SAASC,uBAAuB,sDACtCC,SAAQC,IAAMA,GAAGC,iBAAiB,SAASC,QAC/CA,MAAM2C,qBACFoB,QAAU/D,MAAMY,OAGhBmD,QAAQV,UAAUI,SAAS,YAK/BE,eAAeC,kBAAkB,2CAA4CG,QAAQlD,QAAQmD,MAG7FH,SAASC,gBAQXpE,eAAiB,KAELC,SAASC,uBAAuB,wDACtCC,SAAQC,IAAMA,GAAGC,iBAAiB,SAASC,QAC/CA,MAAM2C,qBACFoB,QAAU/D,MAAMY,OAGhBmD,QAAQV,UAAUI,SAAS,YAK/BE,eAAeC,kBAAkB,6CAA8CG,QAAQlD,QAAQoD,QAG/FJ,SAASC"}